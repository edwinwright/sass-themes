/**
 * Creates a grid row using flexible boxes. Columns will stretch to the same
 * height, and wrap to the next line if there are too many for the row.
 *
 * @param  {length} $gutter  The gutter width.
 */
@mixin flex-row($gutter: $grid-gutter-width) {
  align-items: stretch;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
}

/**
 * Creates a grid column using flexible boxes. The column height will stretch to
 * match the height of the tallest column in the row.
 *
 * A bug in Safari prevents child elements filling the container when their
 * height is set to 100%. So the gutter is applied on the margin rather than the
 * padding, so that it does not interfere with the styling of nested components.
 *
 * // Broken in Safari
 * <div class="flex-row">
 *   <div class="flex-col">
 *      <div class="myComponent" style="height: 100%">
 *          <!-- component content -->
 *      </div>
 *   </div>
 * </div>
 *
 * // Safari workaround
 * <div class="flex-row">
 *   <div class="flex-col myComponent">
 *      <!-- component content -->
 *   </div>
 * </div>
 *
 * @param  {number} $columns The number of grid columns to span.
 * @param  {length} $gutter  The gutter width.
 */
@mixin flex-col($columns, $gutter: $grid-gutter-width) {
  $width: percentage(($columns / $grid-columns));
  margin-left: ($gutter / 2);
  margin-right: ($gutter / 2);
  width: calc(#{$width} - #{$gutter});
}
